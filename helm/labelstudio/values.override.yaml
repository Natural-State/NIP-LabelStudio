# Default values for Label Studio.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Set PG_TRGM within Azure Postres Server parameters
# Source: https://github.com/HumanSignal/label-studio/issues/4310#issuecomment-1678207349

global:
  imagePullSecrets: []

  image:
    repository: heartexlabs/label-studio
    pullPolicy: IfNotPresent
    tag: ""

  pgConfig:
    port: 5432
    dbName: "labelstudio"

  extraEnvironmentVars:
    SKIP_DB_MIGRATIONS: true

app:
  # Update strategy - only really applicable for deployments with RWO PVs attached
  # If replicas = 1, an update can get "stuck", as the previous pod remains attached to the
  # PV, and the "incoming" pod can never start. Changing the strategy to "Recreate" will
  # terminate the single previous pod, so that the new, incoming pod can attach to the PV
  deploymentStrategy:
    type: RollingUpdate
    # type: Recreate

  replicas: 1

  NameOverride: ""
  FullnameOverride: ""
  labels: { }
  podLabels: { }

  ## @param app.args Override default container args (useful when using custom images)
  ##
  args:
    - "label-studio-uwsgi"

  resources:
    requests: {}
      ## Example:
      ## memory: "600Mi"
      ## cpu: "250m"
    limits: {}
    ## Example:
    ##  memory: "4000Mi"
    ##  cpu: "4"

  initContainer:
    resources:
      requests: {}
        ## Example:
        ## memory: 384Mi
        ## cpu: 250m
      limits: {}
        ## Example:
        ## memory: 512Mi
        ## cpu: 500m

  # extraEnvironmentVars is a list of extra environment variables to set in the
  # app deployment.
  extraEnvironmentVars: {}
  # KUBERNETES_SERVICE_HOST: kubernetes.default.svc

  # extraEnvironmentSecrets is a list of extra environment variables to set in the
  # app deployment.
  extraEnvironmentSecrets: {}
  # MYSQL_PASSWORD:
  #   secretName: mysql_secret
  #   secretKey: password

  # nodeSelector labels for pod assignment, formatted as a multi-line string or YAML map.
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # Example:
  # nodeSelector:
  #   beta.kubernetes.io/arch: amd64
  nodeSelector: { }

  topologySpreadConstraints: [ ]

  dnsPolicy: "ClusterFirst"

  enableServiceLinks: false

  shareProcessNamespace: false

  automountServiceAccountToken: true

  # Extra k8s annotations to attach to the app pods
  # This can either be YAML or a YAML-formatted multi-line templated string map
  # of the annotations to apply to the app pods
  annotations: { }

  # Extra k8s labels to attach to Label Studio Enterprise.
  # Provide a YAML map of k8s labels.
  extraLabels: { }

  affinity: { }

  # Toleration Settings for app pods
  # Provide either a multi-line string or YAML matching the Toleration array
  # in a PodSpec.
  tolerations: []

  # Used to define custom readinessProbe settings
  readinessProbe:
    enabled: false
    path: /version
    # When a probe fails, Kubernetes will try failureThreshold times before giving up
    failureThreshold: 2
    # Number of seconds after the container has started before probe initiates
    initialDelaySeconds: 60
    # How often (in seconds) to perform the probe
    periodSeconds: 10
    # Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
    # Number of seconds after which the probe times out.
    timeoutSeconds: 5
  # Used to enable a livenessProbe for the pods
  livenessProbe:
    enabled: true
    path: "/health"
    # When a probe fails, Kubernetes will try failureThreshold times before giving up
    failureThreshold: 3
    # Number of seconds after the container has started before probe initiates
    initialDelaySeconds: 60
    # How often (in seconds) to perform the probe
    periodSeconds: 10
    # Minimum consecutive successes for the probe to be considered successful after having failed
    successThreshold: 1
    # Number of seconds after which the probe times out.
    timeoutSeconds: 5

  service:
    type: ClusterIP
    port: 80
    targetPort: 8085
    portName: service
    annotations: { }
    sessionAffinity: "None"
    sessionAffinityConfig: { }

  ingress:
    enabled: true
    className: ""
    annotations:
      traefik.ingress.kubernetes.io/ssl-redirect: "true"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
    path: /
    extraPaths: []
    pathType: ImplementationSpecific
    tls:
      - hosts:
        - ls-dev.naturalstate.tech
        secretName: ingress-tls-labelstudio
    extraHosts: [ ]

traefik:
  enabled: true
  ports:
    web:
      redirectTo:
        port: websecure
  service:
    externalIPs:
  ssl:
    enabled: true

  # Definition of the serviceAccount used to run Label Studio Enterprise
  serviceAccount:
    # Specifies whether to create a service account
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
    # Extra k8s annotations for the serviceAccount definition. This can either be
    # YAML or a YAML-formatted multi-line templated string map of the
    # k8s annotations to apply to the serviceAccount.
    annotations: {}

  # Array to add extra volumes
  extraVolumes: [ ]
  # Array to add extra mounts (normally used with extraVolumes)
  extraVolumeMounts: [ ]

  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param app.podSecurityContext.enabled Enable pod Security Context
  ##
  podSecurityContext:
    enabled: true
    fsGroup: 1001

  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param containerSecurityContext.enabled Enable container Security Context
  ## @param containerSecurityContext.runAsNonRoot Avoid running as root User
  ## @param containerSecurityContext.allowPrivilegeEscalation Controls whether a process can gain more privileges than its parent process
  ##
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false

  ## RBAC configuration
  ##
  rbac:
    ## @param rbac.create Specifies whether RBAC resources should be created
    ##
    create: false
    ## @param app.rbac.rules Custom RBAC rules to set
    ## e.g:
    ## rules:
    ##   - apiGroups:
    ##       - ""
    ##     resources:
    ##       - pods
    ##     verbs:
    ##       - get
    ##       - list
    ##
    rules: []

  contextPath: /
  ## @param app.cmdWrapper Additional commands to run prior to starting App. Useful to run wrappers before startup command
  ## e.g:
  ## cmdWrapper: "newrelic-admin run-program"
  ##
  cmdWrapper: ""

  ## Minimal number of seconds preStop hook waits before LS is stopped to finish processing requests
  ## Note: must be set to lower value than terminationGracePeriodSeconds so that preStop hook finishes
  ## before grace period expires
  preStopDelaySeconds: 15
  # Seconds LS pod needs to terminate gracefully
  terminationGracePeriodSeconds: 30

  ## Add additional init containers to the App Deployment pod
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: [ ]
